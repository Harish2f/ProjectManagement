data
dfr <- data.frame(date=seq(as.Date('2018-06-11'),as.Date('2018-08-12'),by=1))
dfr$day <- factor(strftime(dfr$date,format="%a"),levels=rev(c("Mon","Tue","Wed","Thu","Fri","Sat","Sun")))
dfr$week <- factor(strftime(dfr$date,format="%V"))
dfr$month <- factor(strftime(dfr$date,format="%B"),levels=c("June","July","August"))
dfr$ddate <- factor(strftime(dfr$date,format="%d"))
View(dfr)
dfr$comment <- "Available"
dfr$comment[dfr$date>=as.Date('2018-06-11') & dfr$date<=as.Date('2018-06-20')] <- "Limited"
dfr$comment[dfr$date>=as.Date('2018-06-21') & dfr$date<=as.Date('2018-06-29')] <- "Not available"
dfr$comment[dfr$date>=as.Date('2018-07-09') & dfr$date<=as.Date('2018-07-13')] <- "Not available"
dfr$comment[dfr$date>=as.Date('2018-08-06') & dfr$date<=as.Date('2018-08-10')] <- "Not available"
dfr$comment[dfr$day=="Sat" | dfr$day=="Sun"] <- "Weekend"
dfr
dfr$comment <- factor(dfr$comment,levels=c("Available","Limited","Not available","Weekend"))
p <- ggplot(dfr,aes(x=week,y=day))+
geom_tile(aes(fill=comment))+
geom_text(aes(label=ddate))+
scale_fill_manual(values=c("#8dd3c7","#ffffb3","#fb8072","#d3d3d3"))+
facet_grid(~month,scales="free",space="free")+
labs(x="Week",y="")+
theme_bw(base_size=10)+
theme(legend.title=element_blank(),
panel.grid=element_blank(),
panel.border=element_blank(),
axis.ticks=element_blank(),
strip.background=element_blank(),
legend.position="top",
legend.justification="right",
legend.direction="horizontal",
legend.key.size=unit(0.3,"cm"),
legend.spacing.x=unit(0.2,"cm"))
p
install.packages("bipartiteD3")
############################
library(bipartiteD3)
## Simple Bipartite Style Data Set:
## Not run: testdata <- data.frame(higher = c("bee1","bee1","bee1","bee2","bee1","bee3"),
lower = c("plant1","plant2","plant1","plant2","plant3","plant4"),
webID = c("meadow","meadow","meadow","meadow","meadow","meadow"), freq=c(5,9,1,2,3,7))
testdata <- data.frame(higher = c("bee1","bee1","bee1","bee2","bee1","bee3"),
lower = c("plant1","plant2","plant1","plant2","plant3","plant4"),
webID = c("meadow","meadow","meadow","meadow","meadow","meadow"), freq=c(5,9,1,2,3,7))
testdata
SmallTestWeb <- bipartite::frame2webs(testdata,type.out="array")
bipartite_D3(SmallTestWeb, filename = 'demo1')
testdata <- data.frame(higher = c("bee1","bee1","bee1","bee2","bee1","bee3"),
lower = c("plant1","plant2","plant1","plant2","plant3","plant4"),
webID = c("meadow","meadow","meadow","meadow","meadow","meadow"), freq=c(5,9,1,2,3,7))
SmallTestWeb <- bipartite::frame2webs(testdata,type.out="array")
bipartite_D3(SmallTestWeb, filename = 'demo1')
SmallTestWeb <- bipartite::frame2webs(testdata,type.out="array")
############################
library(bipartiteD3)
SmallTestWeb <- bipartite::frame2webs(testdata,type.out="array")
install.packages("bipartite")
SmallTestWeb <- bipartite::frame2webs(testdata,type.out="array")
SmallTestWeb
bipartite_D3(SmallTestWeb, filename = 'demo1')
shiny::runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
shiny::runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
shiny::runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
library(r2d3)
r2d3(data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20), script = "barchart.js")
r2d3(data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20), script = "barchart.js");
r2d3::r2d3("C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/ExcelR/D3.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/ExcelR/D3.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
shiny::runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/ExcelR/webshot')
shiny::runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
shiny::runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/D3_folded_charts-master')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/D3_folded_charts-master')
shiny::runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/Code Orange')
runApp('C:/D drive data/AVK/Studies/Hackathon/Code Orange')
runApp('C:/D drive data/AVK/Studies/Hackathon/Code Orange')
runApp('C:/D drive data/AVK/Studies/Hackathon/Code Orange')
runApp('C:/D drive data/AVK/Studies/Hackathon/Code Orange')
runApp('C:/D drive data/AVK/Studies/Hackathon/Code Orange')
runApp()
runApp('C:/D drive data/AVK/Studies/Hackathon/Code Orange')
runApp('C:/D drive data/AVK/Studies/Hackathon/Code Orange')
runApp('C:/D drive data/AVK/Studies/Hackathon/Code Orange')
runApp('C:/D drive data/AVK/Studies/Hackathon/Code Orange')
runApp('C:/D drive data/AVK/Studies/Hackathon/Code Orange')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/ExcelR/webshot')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp()
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
install.packages("RFM")
install.packages("rfm")
library(rfm)
rfm_launch_app()
install.packages("descriptr")
library(descriptr)
rfm_launch_app()
shiny::runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
knitr::opts_chunk$set(echo = TRUE)
box(plotlyOutput("Project_category"), width = 4,solidHeader = TRUE, status = "primary", title = "Research Areas", collapsible = TRUE)
df_ProjectType <- raw_data_projects %>%
group_by(PROJECT.TYPE) %>%
summarise("#Projects" = n())
fig <- plot_ly(type='pie', labels=df_ProjectType$PROJECT.TYPE, values=df_ProjectType$`#Projects`,
textinfo='label+percent',insidetextorientation='radial')
fig <- fig %>% layout(legend = list(orientation = 'h'))
df_ProjectType <- raw_data_projects %>%
group_by(PROJECT.TYPE) %>%
summarise("#Projects" = n())
fig <- plot_ly(type='pie', labels=df_ProjectType$PROJECT.TYPE, values=df_ProjectType$`#Projects`,
textinfo='label+percent',insidetextorientation='radial')
fig <- fig %>% layout(legend = list(orientation = 'h'))
fig
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
knitr::opts_chunk$set(echo = FALSE)
df_ProjectType <- dt_projects() %>%
group_by(PROJECT.TYPE) %>%
summarise("#Projects" = n())
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
##---------------Home page / project share of research area pie chart------------------------------------------
renderPlotly({
df_ProjectType <- raw_data_projects %>%
group_by(PROJECT.TYPE) %>%
summarise("#Projects" = n())
fig <- plot_ly(type='pie', labels=df_ProjectType$PROJECT.TYPE, values=df_ProjectType$`#Projects`,
textinfo='label+percent',insidetextorientation='radial')
fig <- fig %>% layout(legend = list(orientation = 'h'))
fig
})
##---------------Home page / Project status chart--------------------------------------------------------------
renderPlotly({
ggplot(raw_data_projects +
aes(x = PROJECT.TYPE, fill = PROJECT.STATUS) +
geom_bar(position = "dodge") +
scale_fill_hue() +
coord_flip() +
theme_bw() +
theme(legend.position = "none") +
facet_wrap(vars(PROJECT.STATUS))
})
renderPlotly({
p1 <- raw_data_projects %>%
group_by(COMPLEXITY) %>%
summarise("Projects" = n())
fig <- p1 %>% plot_ly(labels = ~COMPLEXITY, values = ~Projects)
fig <- fig %>% add_pie(hole = 0.6)
fig <- fig %>% layout(showlegend = T,xaxis = list(showgrid = T),yaxis = list(showgrid = T))
fig
})
##---------------Home page / project share of research area pie chart------------------------------------------
renderPlotly({
df_ProjectType <- raw_data_projects %>%
group_by(PROJECT.TYPE) %>%
summarise("#Projects" = n())
fig <- plot_ly(type='pie', labels=df_ProjectType$PROJECT.TYPE, values=df_ProjectType$`#Projects`,
textinfo='label+percent',insidetextorientation='radial')
fig <- fig %>% layout(legend = list(orientation = 'h'))
fig
})
```{r}
##---------------Home page / project share of research area pie chart------------------------------------------
renderPlotly({
df_ProjectType <- raw_data_projects %>%
group_by(PROJECT.TYPE) %>%
summarise("#Projects" = n())
fig <- plot_ly(type='pie', labels=df_ProjectType$PROJECT.TYPE, values=df_ProjectType$`#Projects`,
textinfo='label+percent',insidetextorientation='radial')
fig <- fig %>% layout(legend = list(orientation = 'h'))
fig
})
##---------------Home page / project share of research area pie chart------------------------------------------
renderPlotly({
df_ProjectType <- raw_data_projects %>%
group_by(PROJECT.TYPE) %>%
summarise("#Projects" = n())
fig <- plot_ly(type='pie', labels=df_ProjectType$PROJECT.TYPE, values=df_ProjectType$`#Projects`,
textinfo='label+percent',insidetextorientation='radial')
fig <- fig %>% layout(legend = list(orientation = 'h'))
fig
})
knitr::opts_chunk$set(echo = FALSE)
library(shiny)
library(shinydashboard)
library(dplyr)
library(leaflet)
library(ggplot2)
library(tidyverse)
library(DT)
library(plotly)
library(purrr)
library(glue)
library(rhandsontable)
library(tidyr)
library(shinyalert)
library(shinyjs)
library(supercaliheatmapwidget)
library(lubridate)
library(vistime)
library(timevis)
library(rmarkdown)
##---------------Home page / project share of research area pie chart------------------------------------------
renderPlotly({
df_ProjectType <- raw_data_projects %>%
group_by(PROJECT.TYPE) %>%
summarise("#Projects" = n())
fig <- plot_ly(type='pie', labels=df_ProjectType$PROJECT.TYPE, values=df_ProjectType$`#Projects`,
textinfo='label+percent',insidetextorientation='radial')
fig <- fig %>% layout(legend = list(orientation = 'h'))
fig
})
library(shiny)
library(shinydashboard)
library(dplyr)
library(leaflet)
library(ggplot2)
library(tidyverse)
library(DT)
library(plotly)
library(purrr)
library(glue)
library(rhandsontable)
library(tidyr)
library(shinyalert)
library(shinyjs)
library(supercaliheatmapwidget)
library(lubridate)
library(vistime)
library(timevis)
library(rmarkdown)
##---------------Home page / project share of research area pie chart------------------------------------------
renderPlotly({
df_ProjectType <- raw_data_projects %>%
group_by(PROJECT.TYPE) %>%
summarise("#Projects" = n())
fig <- plot_ly(type='pie', labels=df_ProjectType$PROJECT.TYPE, values=df_ProjectType$`#Projects`,
textinfo='label+percent',insidetextorientation='radial')
fig <- fig %>% layout(legend = list(orientation = 'h'))
fig
})
##---------------Home page / Project status chart--------------------------------------------------------------
renderPlotly({
ggplot(raw_data_projects) +
aes(x = PROJECT.TYPE, fill = PROJECT.STATUS) +
geom_bar(position = "dodge") +
scale_fill_hue() +
coord_flip() +
theme_bw() +
theme(legend.position = "none") +
facet_wrap(vars(PROJECT.STATUS))
})
##---------------Home page / Project status chart--------------------------------------------------------------
renderPlotly({
ggplot(raw_data_projects) +
aes(x = PROJECT.TYPE, fill = PROJECT.STATUS) +
geom_bar(position = "dodge") +
scale_fill_hue() +
coord_flip() +
theme_bw() +
theme(legend.position = "none") +
facet_wrap(vars(PROJECT.STATUS))
})
##---------------Home page / project complexity donut chart-------------------------------------------------
Plotly({
p1 <- raw_data_projects %>%
group_by(COMPLEXITY) %>%
summarise("Projects" = n())
fig <- p1 %>% plot_ly(labels = ~COMPLEXITY, values = ~Projects)
fig <- fig %>% add_pie(hole = 0.6)
fig <- fig %>% layout(showlegend = T,xaxis = list(showgrid = T),yaxis = list(showgrid = T))
fig
})
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
##---------------Home page / project share of research area pie chart------------------------------------------
renderPlotly({
df_ProjectType <- raw_data_projects %>%
group_by(PROJECT.TYPE) %>%
summarise("#Projects" = n())
fig <- plot_ly(type='pie', labels=df_ProjectType$PROJECT.TYPE, values=df_ProjectType$`#Projects`,
textinfo='label+percent',insidetextorientation='radial')
fig <- fig %>% layout(legend = list(orientation = 'h'))
})
knitr::opts_chunk$set(echo = FALSE)
library(shiny)
library(shinydashboard)
library(dplyr)
library(leaflet)
library(ggplot2)
library(tidyverse)
library(DT)
library(plotly)
library(purrr)
library(glue)
library(rhandsontable)
library(tidyr)
library(shinyalert)
library(shinyjs)
library(supercaliheatmapwidget)
library(lubridate)
library(vistime)
library(timevis)
library(rmarkdown)
##---------------Home page / project share of research area pie chart------------------------------------------
renderPlotly({
df_ProjectType <- raw_data_projects %>%
group_by(PROJECT.TYPE) %>%
summarise("#Projects" = n())
fig <- plot_ly(type='pie', labels=df_ProjectType$PROJECT.TYPE, values=df_ProjectType$`#Projects`,
textinfo='label+percent',insidetextorientation='radial')
fig <- fig %>% layout(legend = list(orientation = 'h'))
})
##---------------Home page / project share of research area pie chart------------------------------------------
renderPlotly({
df_ProjectType <- raw_data_projects %>%
group_by(PROJECT.TYPE) %>%
summarise("#Projects" = n())
fig <- plot_ly(type='pie', labels=df_ProjectType$PROJECT.TYPE, values=df_ProjectType$`#Projects`,
textinfo='label+percent',insidetextorientation='radial')
fig <- fig %>% layout(legend = list(orientation = 'h'))
fig
})
##---------------Home page / project share of research area pie chart------------------------------------------
df_ProjectType <- raw_data_projects %>%
group_by(PROJECT.TYPE) %>%
summarise("#Projects" = n())
fig <- plot_ly(type='pie', labels=df_ProjectType$PROJECT.TYPE, values=df_ProjectType$`#Projects`,
textinfo='label+percent',insidetextorientation='radial')
fig <- fig %>% layout(legend = list(orientation = 'h'))
fig
##---------------Home page / Project status chart--------------------------------------------------------------
ggplot(raw_data_projects) +
aes(x = PROJECT.TYPE, fill = PROJECT.STATUS) +
geom_bar(position = "dodge") +
scale_fill_hue() +
coord_flip() +
theme_bw() +
theme(legend.position = "none") +
facet_wrap(vars(PROJECT.STATUS))
##---------------Home page / project complexity donut chart-------------------------------------------------
p1 <- raw_data_projects %>%
group_by(COMPLEXITY) %>%
summarise("Projects" = n())
fig <- p1 %>% plot_ly(labels = ~COMPLEXITY, values = ~Projects)
fig <- fig %>% add_pie(hole = 0.6)
fig <- fig %>% layout(showlegend = T,xaxis = list(showgrid = T),yaxis = list(showgrid = T))
fig
##---------------Home page / Overview of projects-------------------------------------------------
df_tmp_projects <-raw_data_projects
datatable(df_tmp_projects[,-1],options = list(pageLength = 10))
##---------------Home page / Overview of projects-------------------------------------------------
df_tmp_projects <-raw_data_projects
df_tmp_projects[,-1],options = list(pageLength = 10)
##---------------Home page / Overview of projects-------------------------------------------------
df_tmp_projects <-raw_data_projects
df_tmp_projects[,-1]
##---------------Home page / Overview of projects-------------------------------------------------
df_tmp_projects <-raw_data_projects
df_tmp_projects[,-1]
df_tmp_upcoming <- dt_tasks()
df_tmp_upcoming <- raw_data_tasks
df_tmp_upcoming$END.DATE <- dmy(df_tmp_upcoming$END.DATE)
df_tmp_upcoming$START.DATE <- dmy(df_tmp_upcoming$START.DATE)
df_tmp_upcoming <- df_tmp_upcoming%>%
filter((as.Date(END.DATE) > today()) & (STATUS != "Completed"))
df_tmp_upcoming[,c("PROJECT.NAME", "TASK.NAME", "START.DATE","END.DATE", "STATUS")]
df_tmp_overdue <- raw_data_tasks
df_tmp_overdue$END.DATE <- dmy(df_tmp_overdue$END.DATE)
df_tmp_overdue$START.DATE <- dmy(df_tmp_overdue$START.DATE)
df_tmp_overdue <- df_tmp_overdue %>%
filter(as.Date(END.DATE) < today() & STATUS != "Completed")
df_tmp_overdue[,c("PROJECT.NAME", "TASK.NAME", "START.DATE","END.DATE", "STATUS")  ]
p1 <- raw_data_projects %>%
group_by(AUDIT) %>%
summarise("count" = n())
fig <- p1 %>% plot_ly(labels = ~AUDIT, values = ~count)
fig <- fig %>% add_pie(hole = 0.6)
fig <- fig %>% layout(showlegend = T,xaxis = list(showgrid = T),yaxis = list(showgrid = T))
fig
df_proj_task <- raw_data_tasks %>%
group_by(PROJECT.NAME, TASK.NAME) %>%
summarise("cnt" = n()) %>%
arrange(desc(cnt))
ggplot(df_proj_task) +
aes(x = PROJECT.NAME) +
geom_bar(fill = "#6baed6") +
labs(y = "Number of Tasks") +
coord_flip() +
theme_bw()
completed_projects <- raw_data_projects %>%
filter(dt_projects()$PROJECT.STATUS == "Completed")
completed_projects <- raw_data_projects %>%
filter(raw_data_projects$PROJECT.STATUS == "Completed")
valueBox(value = tags$p(NROW(completed_projects), style = "font-size: 150%;"),
"Projects Completed ", icon = icon("stack-overflow"), color = "green")
valueBox(value = tags$p(NROW(completed_projects), style = "font-size: 150%;"),
"Projects Completed ", icon = icon("stack-overflow"), color = "green")
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
##---------------Home page / project share of research area pie chart------------------------------------------
df_ProjectType <- raw_data_projects %>%
group_by(PROJECT.TYPE) %>%
summarise("#Projects" = n())
fig <- plot_ly(type='pie', labels=df_ProjectType$PROJECT.TYPE, values=df_ProjectType$`#Projects`,
textinfo='label+percent',insidetextorientation='radial')
fig <- fig %>% layout(legend = list(orientation = 'h'))
fig
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
usethis::edit_rstudio_snippets()
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
runApp('C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting')
saveRDS(raw_data_projects,"Projects.rds")
setwd("C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting")
saveRDS(raw_data_projects,"Projects.rds")
saveRDS(raw_data_tasks,"Tasks.rds")
runApp()
runApp()
runApp()
runApp()
raw_data_projects <- readRDS("./Project.rds")
runApp()
setwd("C:/D drive data/AVK/Studies/Hackathon/R Shiny Competition 2020/Resource Forecasting")
raw_data_projects <- readRDS("Project.rds")
raw_data_tasks <- readRDS("Tasks.rds")
raw_data_projects <- readRDS("Project.rds")
raw_data_projects <- readRDS("Projects.rds")
runApp()
runApp()
runApp()
View(raw_data_projects)
runApp()
runApp()
View(raw_data_projects)
runApp()
runApp()
runApp()
raw_data_projects <- readRDS("Projects.rds")
raw_data_tasks <- readRDS("Tasks.rds")
raw_data_projects <- readRDS("Projects.rds")
raw_data_tasks <- readRDS("Tasks.rds")
# raw_data_tasks <- read.csv("./Data/task_tracker.csv")
raw_data_projects <- read.csv("./Data/project_tracker.csv")
saveRDS(raw_data_projects,"Projects.rds")
runApp()
runApp()
runApp()
runApp()
runApp()
